#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <fcntl.h>           /* For O_* constants */
#include <sys/stat.h>        /* For mode constants */
#include <unistd.h>
#include <semaphore.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <unistd.h>

// sem1: thiefPlaying waited on by thiefs, signaled by Smaug
// sem2: hunterFighting waited on by hunter, signaled by Smaug
// sem3: smaugSleep waited on by Smaug and signaled by theif/hunter after they are done playing/fighting and about to be terminated
// sem4: smaugHasVisitors 
// mutex4: smaugJewel ???

int jewels;
int defeatedThiefs = 0;
int defeatedHunters = 0;

int main()
{
	// Request user to enter winProb, maximumThiefInterval, maximumHunterInterval, 
	int winProb;
	int maximumThiefInterval;
	int maximumHunterInterval;		
	printf("Enter winProb: ");
	scanf("%i", winProb);
	printf("\nEnter maximumThiefInterval: ");
	scanf("%i", maximumThiefInterval);
	printf("\nEnter maximumHunterInterval: ");
	scanf("%i", maximumHunterInterval);
	printf("\n");
		
	// Initializing Smaug
	int smaugId = fork();
	if (smaugId <= 0)
	{
		 perror("Failed to initialize Smaug. Fork return value <= 0. \n");
		 return 0;
	}
	
	// Smaug
	if (getpid() == smaugId)
	{
		smaugRoutine();
		// Kill Smaug process when conditions are met
		smaugId = -1;
		exit(0);
	}
	
	// Keep generating Thiefs and Hunters until Smaug terminates
	while (smaugId > 0)
	{
		
		generateThief();
		generateHunter();
	}
}

// Function simulating Smaug's behaviour
int smaugRoutine()
{	
	while (jewels < 80 || jewels > 0 || defeatedThiefs < 3 || defeatedHunters < 4)
	{
		// Smaug is sleeping after playing/fighting
		printf("Smaug goes to sleep... \n");
		sleep(1);
		// Smaug goes back to sleep if no visitors are present
		while (thiefPlaying >= 0 || hunterFighting >= 0)
		{
			printf("No visitors: Smaug goes to sleep... \n");
			sleep(1);
			printf("Smaug wakes up... \n");
			printf("Smaug takes a deep breath... \n");
		}
		printf("Smaug wakes up... \n");
		printf("Smaug takes a deep breath... \n");
		

		
		// If Thief is present, play with a Thief
		if (thiefPlaying < 0)
		{
			printf("Smaug smells a Thief... \n");
			sem_post(thiefPlaying);
			sem_wait(smaugSleep);
		}
		
		// Otherwise, fight with a Bounty Hunter 
		else
		{
			print("Smaug smells a Bounty Hunter... \n");
			sem_post(hunterFighting);
			sem_wait(smaugSleep);
		}
	}
	
	// Smaug is being terminated
	if (jewels >= 80) {printf("Smaug has 80 jewels now! \n");}
	else if (jewels < 0) {printf("Smaug has lost his treasure! \n");}
	else if (defeatedThiefs >3 ) {printf("Smaug has defeated 3 Thiefs! \n");}
	else {printf("Smaug has defeated 4 Bounty Hunters! \n");}
	exit(0);
	
}

// Function generating a Thief
int generateThief()
{
	return 0;
	if (fork()==0)
	{
		do th
	}
}

// Function simulating Thief's behaviour
int thiefRoutine()
{
	
}

// Function generating a Hunter
int generateHunter()
{
	
}

//Function simulating Hunter's behaviour
int hunterRoutine()
{
	
}